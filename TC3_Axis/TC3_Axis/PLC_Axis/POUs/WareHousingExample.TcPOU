<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="WareHousingExample" Id="{0e6956dd-ffba-455e-80e5-cadd31dc7a91}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM WareHousingExample
VAR
		stateOOP 				: INT;
		stepOn 					: BOOL := FALSE;
                            	
		AXIS_REF_X1 			: Tc2_MC2.AXIS_REF;
		AXIS_REF_Y 				: Tc2_MC2.AXIS_REF;
		AXIS_REF_Z 				: Tc2_MC2.AXIS_REF;
		AXIS_REF_X2_Slave 		: Tc2_MC2.AXIS_REF;
		AXIS_REF_X3_Slave 		: Tc2_MC2.AXIS_REF;
		                    	
		fbAxis_X1 				: TcAxis_Tc2_MC2;
		fbAxis_Y 				: TcAxis_Tc2_MC2;
		fbAxis_Z 				: TcAxis_Tc2_MC2;
		fbAxis_X2_Slave 		: TcAxis_Tc2_MC2;
		fbAxis_X3_Slave 		: TcAxis_Tc2_MC2;


		Axis_X1 				: itfAxis;
		Axis_Y 					: itfAxis;
		Axis_Z 					: itfAxis;
		Axis_X2_Slave 			: itfAxis;
		Axis_X3_Slave 			: itfAxis;
		                    	
		lastCommandX1 			: itfCommand;
		lastCommandY 			: itfCommand;
		lastCommandZ 			: itfCommand;
		lastCommandX2_slave 	: itfCommand;
		lastCommandX3_slave 	: itfCommand;
		
		targetPosX 				: REAL := 400;
		targetPosY 				: REAL := 600;
		
		ActualPosition_X1 		: REAL;
		ActualPosition_Y 		: REAL;
		ActualPosition_Z 		: REAL;
		ActualPosition_X2_Slave : REAL;
		ActualPosition_X3_Slave : REAL;
		
		ActualVelocity_X1 		: REAL;
		ActualVelocity_Y 		: REAL;
		ActualVelocity_Z 		: REAL;
		ActualVelocity_X2_Slave : REAL;
		ActualVelocity_X3_Slave : REAL;
		
		ActualTorque_X1 		: REAL;
		ActualTorque_Y 			: REAL;
		ActualTorque_Z 			: REAL;
		ActualTorque_X2_Slave 	: REAL;
		ActualTorque_X3_Slave 	: REAL;
					
		Enable_Axis             : BOOL;
		Done_X1                 : BOOL;
		Done_Y                  : BOOL;	
		
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

fbAxis_X1(Axis:=AXIS_REF_X1);
fbAxis_Y(Axis:=AXIS_REF_Y);
fbAxis_Z(Axis:=AXIS_REF_Z);
fbAxis_X2_Slave(Axis:=AXIS_REF_X2_Slave);
fbAxis_X3_Slave(Axis:=AXIS_REF_X3_Slave);


Axis_X1 := fbAxis_X1;
Axis_Y := fbAxis_Y;
Axis_Z := fbAxis_Z;
Axis_X2_Slave := fbAxis_X2_Slave;
Axis_X3_Slave := fbAxis_X3_Slave;

ActualPosition_X1 		:= Axis_X1.ActualPosition;
ActualPosition_Y 		:= Axis_Y.ActualPosition;
ActualPosition_Z 		:= Axis_Z.ActualPosition;
ActualPosition_X2_Slave := Axis_X2_Slave.ActualPosition;
ActualPosition_X3_Slave := Axis_X3_Slave.ActualPosition;

ActualVelocity_X1 		:= Axis_X1.ActualVelocity;
ActualVelocity_Y 		:= Axis_Y.ActualVelocity;
ActualVelocity_Z 		:= Axis_Z.ActualVelocity;
ActualVelocity_X2_Slave := Axis_X2_Slave.ActualVelocity;
ActualVelocity_X3_Slave := Axis_X3_Slave.ActualVelocity;

ActualTorque_X1 		:= Axis_X1.ActualTorque;
ActualTorque_Y 			:= Axis_Y.ActualTorque;
ActualTorque_Z 			:= Axis_Z.ActualTorque;
ActualTorque_X2_Slave 	:= Axis_X2_Slave.ActualTorque;
ActualTorque_X3_Slave 	:= Axis_X3_Slave.ActualTorque;


CASE stateOOP OF
	0: ;
		stateOOP := stateOOP + 10;	
	10: 
	// init
		Axis_X1.Power(Enable:=TRUE, EnablePositive:=TRUE, EnableNegative:=TRUE);
		Axis_Y.Power(Enable:=TRUE, EnablePositive:=TRUE, EnableNegative:=TRUE);
		Axis_Z.Power(Enable:=TRUE, EnablePositive:=TRUE, EnableNegative:=TRUE);
		Axis_X2_Slave.Power(Enable:=TRUE, EnablePositive:=TRUE, EnableNegative:=TRUE);
		Axis_X3_Slave.Power(Enable:=TRUE, EnablePositive:=TRUE, EnableNegative:=TRUE);
			
       IF Axis_X1.PowerOn AND Axis_Y.PowerOn AND Axis_Z.PowerOn AND Axis_X2_Slave.PowerOn AND Axis_X3_Slave.PowerOn THEN  	
			IF Axis_X1.Status = Tc2_MC2.MC_AXISSTATE_STANDSTILL AND Axis_Y.Status = Tc2_MC2.MC_AXISSTATE_STANDSTILL AND
				 Axis_Z.Status = Tc2_MC2.MC_AXISSTATE_STANDSTILL AND Axis_X2_Slave.Status = Tc2_MC2.MC_AXISSTATE_STANDSTILL AND Axis_X3_Slave.Status = Tc2_MC2.MC_AXISSTATE_STANDSTILL THEN			
				IF stepOn THEN
					stateOOP := 11;		
					stepOn := FALSE;
				END_IF
			END_IF
		END_IF
	11 : 
	//GearIn
		Axis_X1.GearIn(Slave:= AXIS_REF_X2_Slave, RatioNumerator:= 1,RatioDenominator:= 1, Acceleration:= 0,Deceleration:= 0, Jerk:= 0,BufferMode:= MC_BUFFER_MODE.mcAborting);
		Axis_X1.GearIn(Slave:= AXIS_REF_X3_Slave, RatioNumerator:= 1,RatioDenominator:= 1, Acceleration:= 0,Deceleration:= 0, Jerk:= 0,BufferMode:= MC_BUFFER_MODE.mcAborting);
		stateOOP := 12;						
			
	12:
	// Geared
	    IF Axis_X2_Slave.Geared AND Axis_X3_Slave.Geared THEN			
			stateOOP := 20;
			stepOn := FALSE;		
		END_IF			

	20:
	// start movement in XY
//		IF stepOn THEN	
			lastCommandX1 := Axis_X1.MoveAbsolute(Position:=targetPosX, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
			lastCommandY := Axis_Y.MoveAbsolute(Position:=targetPosY, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
			
	//		Done_X1 := lastCommandX1.Done;
	//		Done_X1 := Axis_X1.MoveAbsolute(Position:=targetPosX, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting).Done;
	//		Done_Y  := lastCommandY.Done;
			
			IF lastCommandX1.Done AND lastCommandY.Done THEN
				stateOOP := stateOOP + 10;
	//		stepOn := FALSE;
			END_IF		
//		END_IF	
	30:
	// wait till movement is finished to 'forkIn'
//		IF lastCommandX1.Done AND lastCommandY.Done THEN
//			IF stepOn THEN
			lastCommandZ := Axis_Z.MoveRelative(Distance:=100, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
			IF lastCommandZ.Done THEN
				stateOOP := stateOOP + 10;
			END_IF
//		END_IF
	40:
	// lift pallet if forked in
//		IF lastCommandZ.Done THEN
			lastCommandY := Axis_Y.MoveRelative(Distance:=100, Velocity:=10, Acceleration:=0, Deceleration:=0, Jerk:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
			IF lastCommandY.Done THEN
				stateOOP := stateOOP + 10;
			END_IF
//		END_IF
	50:
	// fork out with pallet if forked in is done
//		IF lastCommandY.Done THEN
			lastCommandZ := Axis_Z.MoveAbsolute(Position:=0, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
			IF lastCommandZ.Done THEN
				stateOOP := stateOOP + 10;
				stepOn := FALSE;
			END_IF
//		END_IF
	60:
	// move to delivery if fork out is done
//		IF lastCommandZ.Done THEN
			lastCommandX1 := Axis_X1.MoveAbsolute(Position:=20, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
//			lastCommandX1 := Axis_X1.MoveRelative(Distance:=100, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
//			Axis_X1.MoveAbsolute(Position:=0, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
			lastCommandY := Axis_Y.MoveAbsolute(Position:=20, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
//			Axis_Y.MoveAbsolute(Position:=0, Velocity:=40, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);		
//			lastCommandY := Axis_Y.MoveRelative(Distance:=100, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);			
//			IF stepOn THEN			
				IF lastCommandX1.Done AND lastCommandY.Done THEN			
					stateOOP := stateOOP + 10;
				END_IF
//			END_IF
	70:
	// wait till finished
//		IF lastCommandX1.Done AND lastCommandY.Done THEN
//		lastCommandX1 := Axis_X1.MoveAbsolute(Position:=0, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
//		lastCommandY := Axis_Y.MoveAbsolute(Position:=0, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting);
		
		Done_X1 := Axis_X1.MoveAbsolute(Position:=0, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting).Done;
		Done_Y  := Axis_Y.MoveAbsolute(Position:=0, Velocity:=20, Acceleration:=0, Deceleration:=0, Jerk:=0, Direction:=0, BufferMode:=MC_BUFFER_MODE.mcAborting).Done;
		IF Done_X1 AND Done_Y THEN
			stateOOP := stateOOP + 10;
		END_IF
	80: 
	// ready
	;
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>